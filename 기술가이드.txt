. 배치 어플리케이션의 개념, 정의
    대용량 데이터 - 배치 어플리케이션은 대량의 데이터를 가져오거나, 전달하거나, 계산하는 등의 처리를 할 수 ​​있어야 합니다.
    자동화 - 배치 어플리케이션은 심각한 문제 해결을 제외하고는 사용자 개입 없이 실행되어야 합니다.
    견고성 - 배치 어플리케이션은 잘못된 데이터를 충돌/중단 없이 처리할 수 있어야 합니다.
    신뢰성 - 배치 어플리케이션은 무엇이 잘못되었는지를 추적할 수 있어야 합니다. (로깅, 알림)
    성능 - 배치 어플리케이션은 지정한 시간 안에 처리를 완료하거나 동시에 실행되는 다른 어플리케이션을 방해하지 않도록 수행되어야합니다.

. @EnableBatchProcessing

. StepScope

. JobScope

. JobOperator > SimpleJobOperator

. DefaultListableBeanFactory
    . private final Map<String, Scope> scopes = new LinkedHashMap<>(8);
    . public void registerScope(String scopeName, Scope scope) {
        . this.scopes.put("step", StepScope);
        . this.scopes.put("job", JopScope);

. BatchProperties

. SimpleBatchConfiguration

. AbstractBatchConfiguration

. JobLauncherApplicationRunner
    . DefaultJobParametersConverter
        . JobParametersBuilder 를 생성하고 JobParameters 정보를 얻는다
        . JobParametersBuilder propertiesBuilder = new JobParametersBuilder();
    . executeLocalJobs(JobParameters jobParameters)
        . execute(job, jobParameters);
            . jobParameters 를 전달하고 Job 을 실행한다
    . protected void execute(Job job, JobParameters jobParameters)
        . JobParameters parameters = getNextJobParameters(job, jobParameters);            
            . private JobParameters getNextJobParameters(Job job, JobParameters jobParameters)
                . this.jobRepository.isJobInstanceExists(job.getName(), jobParameters))
                    . job 이름과 jobParameter 를 인코딩한 키를 가지고 DB 에 저장된 JobInstance 가 있는지 확인
                    . JobInstance 가 존재할 경우 getNextJobParametersForExisting(job, jobParameters) 호출
            . private JobParameters getNextJobParametersForExisting(Job job, JobParameters jobParameters)
                . JobExecution lastExecution = this.jobRepository.getLastJobExecution(job.getName(), jobParameters);
                    . JobExecution 조회
            . JobExecution getLastJobExecution(String jobName, JobParameters jobParameters)            
                . JobInstance jobInstance = jobInstanceDao.getJobInstance(jobName, jobParameters)
                . JobExecution jobExecution = jobExecutionDao.getLastJobExecution(jobInstance) 
                    . Long id = jobInstance.getId();
                    List<JobExecution> executions = getJdbcTemplate().query(getQuery(GET_LAST_EXECUTION),
                    new JobExecutionRowMapper(jobInstance), id, id);

                    . if (jobExecution != null) : jobInstance 이 null 아닐경우 마지막 jobExecution 를 조회
                        jobExecution.setExecutionContext(ecDao.getExecutionContext(jobExecution)) : jobExecution 에 ExecutionContext 저장
                        stepExecutionDao.addStepExecutions(jobExecution)
                            . 각 StepExecution 마다 jobExecution을 저장하고 jobExecution 의 stepExecutions 에 각 StepExecution 들을 저장
		. this.jobLauncher.run(job, parameters)
            . JobExecution lastExecution = jobRepository.getLastJobExecution(job.getName(), jobParameters);
            . job.getJobParametersValidator().validate(jobParameters): 파라미터 검증 - 필수값이나 옵션등이 지정되었는지 여부 확인하여 거짓이면 예외 발생
            . jobExecution = jobRepository.createJobExecution(job.getName(), jobParameters) : 새로운 JobInstance 생성
                . JobInstance jobInstance = jobInstanceDao.getJobInstance(jobName, jobParameters);
                . if (jobInstance != null) {
			        List<JobExecution> executions = jobExecutionDao.findJobExecutions(jobInstance);
                        for (JobExecution execution : executions) {
                            // 진행중이거나 중지중이면 예외
                            if (execution.isRunning() || execution.isStopping()) {
                                throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: "
                                        + jobInstance);
                            }

                            // UNKNOWN 이면 예외
                            BatchStatus status = execution.getStatus();
                            if (status == BatchStatus.UNKNOWN) {
                                throw new JobRestartException("Cannot restart job from UNKNOWN status. "
                                        + "The last execution ended with a failure that could not be rolled back, "
                                        + "so it may be dangerous to proceed. Manual intervention is probably necessary.");
                            }
                            // COMPLETED 이거나 ABANDONED 이면 예외
                            if (execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {
                                throw new JobInstanceAlreadyCompleteException(
                                        "A job instance already exists and is complete for parameters=" + jobParameters
                                        + ".  If you want to run this job again, change the parameters.");
                            }
                        }
. JobExecution

. StepExecution

. ExecutionContext
    . 각 단계마다 다른 테이블을 사용하여 Step 및 Job 과 관련된 실행 컨텍스트 데이터를 저장

. JobBuilderFactory
    . jobBuilderFactory.get("simpleJob")
        . SimpleJobBuilder or JobFlowBuilder 객체를 반환한다.
    . JobBuilderHelper
        . JobBuilder 
            - start(), next() 의 유형에 따라 SimpleJobBuilder 와 FlowJobBuilder 를 생성하여 step, flow 를 실행하도록 한다
            - CommonJobProperties 객체를 생성하고 SimpleJobBuilder 와 FlowJobBuilder 에서 사용하도록 한다
            - SimpleJobBuilder 와 FlowJobBuilder 의 parent 역할을 한다

        . SimpleJobBuilder
            . public Job build()
                . Job 인스턴스인 SimpleJob 생성

        . FlowJobBuilder
            . public Job build()
                . Job 인스턴스인 FlowJob 생성

. FlowBuilder
    . JobFlowBuilder  
        . 실제로 Step 과 Flow 들을 실행시키는 빌더

. Job
    . 하나의 배치 작업 단위
    . 여러 Step이 존재
    . 지정한 Batch Job만 실행
        . spring.batch.job.names: ${job.name:NONE} 
            - Program arguments로 job.name 값이 넘어오면 해당 값과 일치하는 Job만 실행
            - job.name이 있으면 job.name값을 할당하고, 없으면 NONE을 할당
            - spring.batch.job.names에 NONE이 할당되면 어떤 배치도 실행하지 않겠다는 의미 즉, 값이 없을때 모든 배치가 실행되지 않도록 막는 역할
        . 운영환경 : java -jar batch-application.jar --job.name=simpleJob    
    . SimpleJob
        . Job 의 구현체
        . Job의 Step 들을 실행하고 관리함

    . FlowJob        

. StepBuilderFactory
    . stepBuilderFactory.get("simpleStep1")

. StepBuilder

. Step
    . Tasklet 혹은 Reader & Processor & Writer 묶음이 존재
    . Tasklet 하나와 Reader & Processor & Writer 한 묶음이 같은 레벨
    . Reader & Processor가 끝나고 Tasklet으로 마무리 짓는 등으로 만들순 없다
    . 실제 Batch 작업을 수행하는 역할
    . Batch로 실제 처리하고자 하는 기능과 설정을 모두 포함하는 장소

    . Next
        . 순차적으로 Step들 연결시킬때 사용
        . 앞의 step에서 오류가 나면 나머지 뒤에 있는 step 들은 실행되지 못함

. State

. JobRepository - Job,Step 등의 실행정보들을 DB 와 연동하기 위한 클래스

. Flow
        . 조건별 흐름 제어 즉, 조건별로 Step을 분기하여 사용할 수 있음
        . 상황에 따라 정상일때는 Step B로, 오류가 났을때는 Step C로 수행해야할 때
        .on()
            - 캐치할 ExitStatus 지정
            - * 일 경우 모든 ExitStatus가 지정된다.
        to()
            - 다음으로 이동할 Step 지정
        from()
            - 일종의 이벤트 리스너 역할
            - 상태값을 보고 일치하는 상태라면 to()에 포함된 step을 호출합니다.
            - step1의 이벤트 캐치가 FAILED로 되있는 상태에서 추가로 이벤트 캐치하려면 from을 써야만 함
        end()
            - end는 FlowBuilder를 반환하는 end와 FlowBuilder를 종료하는 end 2개가 있음
            - on("*")뒤에 있는 end는 FlowBuilder를 반환하는 end
            - build() 앞에 있는 end는 FlowBuilder를 종료하는 end
            - FlowBuilder를 반환하는 end 사용시 계속해서 from을 이어갈 수 있음

. Tasklet
    . Step안에서 단일로 수행될 커스텀한 기능들을 선언할때 사용
    . StepContribution
    . ChunkContext

. RepeatStatus 

. JobParametersBuilder
    . JobParameters 생성하고 Map<String, JobParameter> parameterMap 를 저장
    . parameterMap 에는 JobParameter 를 저장
        . new JobParameters(this.parameterMap)
        . parameterMap.put(key, new JobParameter(value, identifying))
. JobParameter
    . Spring Batch가 실행될때 외부에서 받을 수 있는 파라미터
    . 특정 날짜를 Job Parameter로 넘기면 Spring Batch에서는 해당 날짜 데이터로 조회/가공/입력 등의 작업  

. JobExecution    

. @JobScope   

. Spring Batch의 메타 데이터
    이전에 실행한 Job이 어떤 것들이 있는지
    최근 실패한 Batch Parameter가 어떤것들이 있고, 성공한 Job은 어떤것들이 있는지
    다시 실행한다면 어디서 부터 시작하면 될지
    어떤 Job에 어떤 Step들이 있었고, Step들 중 성공한 Step과 실패한 Step들은 어떤것들이 있는지    
    본인의 IDE에서 파일 검색으로 schema-를 해보시면 메타 테이블들의 스키마가 DBMS에 맞춰 각각 존재
        . BATCH_JOB_INSTANCE
            . JOB_INSTANCE_ID
                BATCH_JOB_INSTANCE 테이블의 PK
            . JOB_NAME
            
                수행한 Batch Job Name
            . Job Parameter에 단위로  생성되는 테이블    
            . 같은 Batch Job 이라도 Job Parameter가 다르면 Batch_JOB_INSTANCE 에 기록되며, Job Parameter가 같다면 기록되지 않음
            . 동일한 Job이 Job Parameter가 달라지면 그때마다 BATCH_JOB_INSTANCE에 생성되며, 동일한 Job Parameter는 여러개 존재할 수 없습니다
        
        . BATCH_JOB_EXECUTION
            . JOB_EXECUTION와 JOB_INSTANCE는 부모-자식 관계
            . JOB_EXECUTION은 자신의 부모 JOB_INSTACNE가 성공/실패했던 모든 내역을 갖고 있음
            . 동일한 Job Parameter 로 Batch Job 이 실패했을 경우에는 계속 기록되고 Batch Job 성공하게 되면 더 이상 기록되지 않는다
            . 동일한 Job Parameter로 성공한 기록이 있을때만 재수행이 안된다
            . 최초 시도 시 성공하면 일대일 관계이고 최초 시도시 실패하면 일대다 관계로 기록된다

        . BATCH_JOB_EXECUTION_PARAM
            .BATCH_JOB_EXECUTION 테이블이 생성될 당시에 입력 받은 Job Parameter를 담고 있음

. JobRepository

. BatchStatus : STARTING, STARTED, STOPPING, STOPPED, FAILED, COMPLETED, ABANDONED

. JobExecutionDecider